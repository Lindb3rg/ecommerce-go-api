// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: shipper.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countShippers = `-- name: CountShippers :one
SELECT COUNT(*) FROM shippers
`

// Counts the total number of shippers
func (q *Queries) CountShippers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countShippers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createShipper = `-- name: CreateShipper :one
INSERT INTO shippers (
  company_name,
  phone
) VALUES (
  $1, $2
)
RETURNING shipper_id, company_name, phone
`

type CreateShipperParams struct {
	CompanyName string      `json:"company_name"`
	Phone       pgtype.Text `json:"phone"`
}

// Creates a new shipper and returns it
func (q *Queries) CreateShipper(ctx context.Context, arg CreateShipperParams) (Shipper, error) {
	row := q.db.QueryRow(ctx, createShipper, arg.CompanyName, arg.Phone)
	var i Shipper
	err := row.Scan(&i.ShipperID, &i.CompanyName, &i.Phone)
	return i, err
}

const deleteShipper = `-- name: DeleteShipper :exec
DELETE FROM shippers
WHERE shipper_id = $1
`

// Deletes a shipper by ID
func (q *Queries) DeleteShipper(ctx context.Context, shipperID int16) error {
	_, err := q.db.Exec(ctx, deleteShipper, shipperID)
	return err
}

const getShipper = `-- name: GetShipper :one
SELECT shipper_id, company_name, phone
FROM shippers
WHERE shipper_id = $1
`

// Gets a shipper by ID
func (q *Queries) GetShipper(ctx context.Context, shipperID int16) (Shipper, error) {
	row := q.db.QueryRow(ctx, getShipper, shipperID)
	var i Shipper
	err := row.Scan(&i.ShipperID, &i.CompanyName, &i.Phone)
	return i, err
}

const getShipperByExactName = `-- name: GetShipperByExactName :one
SELECT shipper_id, company_name, phone
FROM shippers
WHERE company_name = $1
`

// Gets a shipper by exact company name (useful for duplicate checks)
func (q *Queries) GetShipperByExactName(ctx context.Context, companyName string) (Shipper, error) {
	row := q.db.QueryRow(ctx, getShipperByExactName, companyName)
	var i Shipper
	err := row.Scan(&i.ShipperID, &i.CompanyName, &i.Phone)
	return i, err
}

const listShippers = `-- name: ListShippers :many
SELECT shipper_id, company_name, phone
FROM shippers
ORDER BY company_name
`

// Lists all shippers
func (q *Queries) ListShippers(ctx context.Context) ([]Shipper, error) {
	rows, err := q.db.Query(ctx, listShippers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shipper{}
	for rows.Next() {
		var i Shipper
		if err := rows.Scan(&i.ShipperID, &i.CompanyName, &i.Phone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchShippersByName = `-- name: SearchShippersByName :many
SELECT shipper_id, company_name, phone
FROM shippers
WHERE company_name ILIKE '%' || $1 || '%'
ORDER BY company_name
`

// Searches shippers by company name (case insensitive)
func (q *Queries) SearchShippersByName(ctx context.Context, dollar_1 pgtype.Text) ([]Shipper, error) {
	rows, err := q.db.Query(ctx, searchShippersByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shipper{}
	for rows.Next() {
		var i Shipper
		if err := rows.Scan(&i.ShipperID, &i.CompanyName, &i.Phone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchShippersByPhone = `-- name: SearchShippersByPhone :many
SELECT shipper_id, company_name, phone
FROM shippers
WHERE phone LIKE '%' || $1 || '%'
ORDER BY company_name
`

// Searches shippers by phone number
func (q *Queries) SearchShippersByPhone(ctx context.Context, dollar_1 pgtype.Text) ([]Shipper, error) {
	rows, err := q.db.Query(ctx, searchShippersByPhone, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shipper{}
	for rows.Next() {
		var i Shipper
		if err := rows.Scan(&i.ShipperID, &i.CompanyName, &i.Phone); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShipper = `-- name: UpdateShipper :one
UPDATE shippers
SET
  company_name = $2,
  phone = $3
WHERE shipper_id = $1
RETURNING shipper_id, company_name, phone
`

type UpdateShipperParams struct {
	ShipperID   int16       `json:"shipper_id"`
	CompanyName string      `json:"company_name"`
	Phone       pgtype.Text `json:"phone"`
}

// Updates a shipper by ID
func (q *Queries) UpdateShipper(ctx context.Context, arg UpdateShipperParams) (Shipper, error) {
	row := q.db.QueryRow(ctx, updateShipper, arg.ShipperID, arg.CompanyName, arg.Phone)
	var i Shipper
	err := row.Scan(&i.ShipperID, &i.CompanyName, &i.Phone)
	return i, err
}
