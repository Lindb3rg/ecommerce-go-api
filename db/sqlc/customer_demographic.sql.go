// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customer_demographic.sql

package db

import (
	"context"
	"database/sql"
)

const countCustomerDemographics = `-- name: CountCustomerDemographics :one
SELECT COUNT(*) FROM customer_demographics
`

// Counts the total number of customer demographics
func (q *Queries) CountCustomerDemographics(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCustomerDemographics)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCustomerDemographic = `-- name: CreateCustomerDemographic :one
INSERT INTO customer_demographics (
  customer_type_id,
  customer_desc
) VALUES (
  $1, $2
)
RETURNING customer_type_id, customer_desc
`

type CreateCustomerDemographicParams struct {
	CustomerTypeID interface{}    `json:"customer_type_id"`
	CustomerDesc   sql.NullString `json:"customer_desc"`
}

// Creates a new customer demographic and returns it
func (q *Queries) CreateCustomerDemographic(ctx context.Context, arg CreateCustomerDemographicParams) (CustomerDemographic, error) {
	row := q.db.QueryRowContext(ctx, createCustomerDemographic, arg.CustomerTypeID, arg.CustomerDesc)
	var i CustomerDemographic
	err := row.Scan(&i.CustomerTypeID, &i.CustomerDesc)
	return i, err
}

const deleteCustomerDemographic = `-- name: DeleteCustomerDemographic :exec
DELETE FROM customer_demographics
WHERE customer_type_id = $1
`

// Deletes a customer demographic by type ID
func (q *Queries) DeleteCustomerDemographic(ctx context.Context, customerTypeID interface{}) error {
	_, err := q.db.ExecContext(ctx, deleteCustomerDemographic, customerTypeID)
	return err
}

const getCustomerDemographic = `-- name: GetCustomerDemographic :one
SELECT customer_type_id, customer_desc
FROM customer_demographics
WHERE customer_type_id = $1
`

// Gets a customer demographic by type ID
func (q *Queries) GetCustomerDemographic(ctx context.Context, customerTypeID interface{}) (CustomerDemographic, error) {
	row := q.db.QueryRowContext(ctx, getCustomerDemographic, customerTypeID)
	var i CustomerDemographic
	err := row.Scan(&i.CustomerTypeID, &i.CustomerDesc)
	return i, err
}

const listCustomerDemographics = `-- name: ListCustomerDemographics :many
SELECT customer_type_id, customer_desc
FROM customer_demographics
ORDER BY customer_type_id
`

// Lists all customer demographics
func (q *Queries) ListCustomerDemographics(ctx context.Context) ([]CustomerDemographic, error) {
	rows, err := q.db.QueryContext(ctx, listCustomerDemographics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerDemographic{}
	for rows.Next() {
		var i CustomerDemographic
		if err := rows.Scan(&i.CustomerTypeID, &i.CustomerDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCustomerDemographicsByDesc = `-- name: SearchCustomerDemographicsByDesc :many
SELECT customer_type_id, customer_desc
FROM customer_demographics
WHERE customer_desc ILIKE '%' || $1 || '%'
ORDER BY customer_type_id
`

// Searches customer demographics by description (case insensitive)
func (q *Queries) SearchCustomerDemographicsByDesc(ctx context.Context, dollar_1 sql.NullString) ([]CustomerDemographic, error) {
	rows, err := q.db.QueryContext(ctx, searchCustomerDemographicsByDesc, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerDemographic{}
	for rows.Next() {
		var i CustomerDemographic
		if err := rows.Scan(&i.CustomerTypeID, &i.CustomerDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomerDemographic = `-- name: UpdateCustomerDemographic :one
UPDATE customer_demographics
SET
  customer_desc = $2
WHERE customer_type_id = $1
RETURNING customer_type_id, customer_desc
`

type UpdateCustomerDemographicParams struct {
	CustomerTypeID interface{}    `json:"customer_type_id"`
	CustomerDesc   sql.NullString `json:"customer_desc"`
}

// Updates a customer demographic by type ID
func (q *Queries) UpdateCustomerDemographic(ctx context.Context, arg UpdateCustomerDemographicParams) (CustomerDemographic, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerDemographic, arg.CustomerTypeID, arg.CustomerDesc)
	var i CustomerDemographic
	err := row.Scan(&i.CustomerTypeID, &i.CustomerDesc)
	return i, err
}
