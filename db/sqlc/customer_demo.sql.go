// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customer_demo.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countCustomersByDemographic = `-- name: CountCustomersByDemographic :one
SELECT COUNT(*)
FROM customer_customer_demo
WHERE customer_type_id = $1
`

// Counts how many customers belong to a specific demographic
func (q *Queries) CountCustomersByDemographic(ctx context.Context, customerTypeID interface{}) (int64, error) {
	row := q.db.QueryRow(ctx, countCustomersByDemographic, customerTypeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countDemographicsByCustomer = `-- name: CountDemographicsByCustomer :one
SELECT COUNT(*)
FROM customer_customer_demo
WHERE customer_id = $1
`

// Counts how many demographics a specific customer belongs to
func (q *Queries) CountDemographicsByCustomer(ctx context.Context, customerID interface{}) (int64, error) {
	row := q.db.QueryRow(ctx, countDemographicsByCustomer, customerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCustomerDemoRelation = `-- name: CreateCustomerDemoRelation :one
INSERT INTO customer_customer_demo (
  customer_id,
  customer_type_id
) VALUES (
  $1, $2
)
RETURNING customer_id, customer_type_id
`

type CreateCustomerDemoRelationParams struct {
	CustomerID     interface{} `json:"customer_id"`
	CustomerTypeID interface{} `json:"customer_type_id"`
}

// Creates a new customer-demographic relation
func (q *Queries) CreateCustomerDemoRelation(ctx context.Context, arg CreateCustomerDemoRelationParams) (CustomerCustomerDemo, error) {
	row := q.db.QueryRow(ctx, createCustomerDemoRelation, arg.CustomerID, arg.CustomerTypeID)
	var i CustomerCustomerDemo
	err := row.Scan(&i.CustomerID, &i.CustomerTypeID)
	return i, err
}

const deleteAllCustomerDemoRelations = `-- name: DeleteAllCustomerDemoRelations :exec
DELETE FROM customer_customer_demo
WHERE customer_id = $1
`

// Deletes all demographic relations for a specific customer
func (q *Queries) DeleteAllCustomerDemoRelations(ctx context.Context, customerID interface{}) error {
	_, err := q.db.Exec(ctx, deleteAllCustomerDemoRelations, customerID)
	return err
}

const deleteCustomerDemoRelation = `-- name: DeleteCustomerDemoRelation :exec
DELETE FROM customer_customer_demo
WHERE customer_id = $1 AND customer_type_id = $2
`

type DeleteCustomerDemoRelationParams struct {
	CustomerID     interface{} `json:"customer_id"`
	CustomerTypeID interface{} `json:"customer_type_id"`
}

// Deletes a specific customer-demographic relation
func (q *Queries) DeleteCustomerDemoRelation(ctx context.Context, arg DeleteCustomerDemoRelationParams) error {
	_, err := q.db.Exec(ctx, deleteCustomerDemoRelation, arg.CustomerID, arg.CustomerTypeID)
	return err
}

const getCustomerDemoRelation = `-- name: GetCustomerDemoRelation :one
SELECT customer_id, customer_type_id
FROM customer_customer_demo
WHERE customer_id = $1 AND customer_type_id = $2
`

type GetCustomerDemoRelationParams struct {
	CustomerID     interface{} `json:"customer_id"`
	CustomerTypeID interface{} `json:"customer_type_id"`
}

// Gets a specific customer-demographic relation
func (q *Queries) GetCustomerDemoRelation(ctx context.Context, arg GetCustomerDemoRelationParams) (CustomerCustomerDemo, error) {
	row := q.db.QueryRow(ctx, getCustomerDemoRelation, arg.CustomerID, arg.CustomerTypeID)
	var i CustomerCustomerDemo
	err := row.Scan(&i.CustomerID, &i.CustomerTypeID)
	return i, err
}

const listAllCustomerDemographicsWithDetails = `-- name: ListAllCustomerDemographicsWithDetails :many
SELECT 
  c.customer_id,
  c.company_name,
  c.contact_name,
  cd.customer_type_id,
  cd.customer_desc
FROM customer_customer_demo ccd
JOIN customers c ON ccd.customer_id = c.customer_id
JOIN customer_demographics cd ON ccd.customer_type_id = cd.customer_type_id
ORDER BY c.company_name, cd.customer_type_id
`

type ListAllCustomerDemographicsWithDetailsRow struct {
	CustomerID     interface{} `json:"customer_id"`
	CompanyName    string      `json:"company_name"`
	ContactName    pgtype.Text `json:"contact_name"`
	CustomerTypeID interface{} `json:"customer_type_id"`
	CustomerDesc   pgtype.Text `json:"customer_desc"`
}

// Lists all customer-demographic relations with full details from both tables
func (q *Queries) ListAllCustomerDemographicsWithDetails(ctx context.Context) ([]ListAllCustomerDemographicsWithDetailsRow, error) {
	rows, err := q.db.Query(ctx, listAllCustomerDemographicsWithDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAllCustomerDemographicsWithDetailsRow{}
	for rows.Next() {
		var i ListAllCustomerDemographicsWithDetailsRow
		if err := rows.Scan(
			&i.CustomerID,
			&i.CompanyName,
			&i.ContactName,
			&i.CustomerTypeID,
			&i.CustomerDesc,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomerDemographicsByCustomer = `-- name: ListCustomerDemographicsByCustomer :many
SELECT cd.customer_type_id, cd.customer_desc
FROM customer_customer_demo ccd
JOIN customer_demographics cd ON ccd.customer_type_id = cd.customer_type_id
WHERE ccd.customer_id = $1
`

// Lists all demographics for a specific customer with demographic details
func (q *Queries) ListCustomerDemographicsByCustomer(ctx context.Context, customerID interface{}) ([]CustomerDemographic, error) {
	rows, err := q.db.Query(ctx, listCustomerDemographicsByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerDemographic{}
	for rows.Next() {
		var i CustomerDemographic
		if err := rows.Scan(&i.CustomerTypeID, &i.CustomerDesc); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCustomersByDemographic = `-- name: ListCustomersByDemographic :many
SELECT c.customer_id, c.company_name, c.contact_name, c.contact_title, c.address, c.city, c.region, c.postal_code, c.country, c.phone, c.fax, c.created_at, c.active
FROM customer_customer_demo ccd
JOIN customers c ON ccd.customer_id = c.customer_id
WHERE ccd.customer_type_id = $1
ORDER BY c.company_name
`

// Lists all customers belonging to a specific demographic with customer details
func (q *Queries) ListCustomersByDemographic(ctx context.Context, customerTypeID interface{}) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomersByDemographic, customerTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.CustomerID,
			&i.CompanyName,
			&i.ContactName,
			&i.ContactTitle,
			&i.Address,
			&i.City,
			&i.Region,
			&i.PostalCode,
			&i.Country,
			&i.Phone,
			&i.Fax,
			&i.CreatedAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
