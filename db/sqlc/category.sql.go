// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: category.sql

package db

import (
	"context"
	"database/sql"
)

const countCategories = `-- name: CountCategories :one
SELECT COUNT(*) FROM categories
`

// Counts the total number of categories
func (q *Queries) CountCategories(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCategories)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
  category_name,
  description,
  picture
) VALUES (
  $1, $2, $3
)
RETURNING category_id, category_name, description, picture
`

type CreateCategoryParams struct {
	CategoryName string         `json:"category_name"`
	Description  sql.NullString `json:"description"`
	Picture      []byte         `json:"picture"`
}

// Creates a new category and returns it
func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.CategoryName, arg.Description, arg.Picture)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.Description,
		&i.Picture,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories
WHERE category_id = $1
`

// Deletes a category by ID
func (q *Queries) DeleteCategory(ctx context.Context, categoryID int16) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, categoryID)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT category_id, category_name, description, picture
FROM categories
WHERE category_id = $1
`

// Gets a category by ID
func (q *Queries) GetCategory(ctx context.Context, categoryID int16) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, categoryID)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.Description,
		&i.Picture,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT category_id, category_name, description, picture
FROM categories
ORDER BY category_name
`

// Lists all categories
func (q *Queries) ListCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.Description,
			&i.Picture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchCategoriesByName = `-- name: SearchCategoriesByName :many
SELECT category_id, category_name, description, picture
FROM categories
WHERE category_name ILIKE '%' || $1 || '%'
ORDER BY category_name
`

// Searches categories by name (case insensitive)
func (q *Queries) SearchCategoriesByName(ctx context.Context, dollar_1 sql.NullString) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, searchCategoriesByName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.CategoryID,
			&i.CategoryName,
			&i.Description,
			&i.Picture,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories
SET
  category_name = $2,
  description = $3,
  picture = $4
WHERE category_id = $1
RETURNING category_id, category_name, description, picture
`

type UpdateCategoryParams struct {
	CategoryID   int16          `json:"category_id"`
	CategoryName string         `json:"category_name"`
	Description  sql.NullString `json:"description"`
	Picture      []byte         `json:"picture"`
}

// Updates a category by ID
func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.CategoryID,
		arg.CategoryName,
		arg.Description,
		arg.Picture,
	)
	var i Category
	err := row.Scan(
		&i.CategoryID,
		&i.CategoryName,
		&i.Description,
		&i.Picture,
	)
	return i, err
}
