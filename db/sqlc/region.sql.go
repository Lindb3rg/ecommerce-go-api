// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: region.sql

package db

import (
	"context"
	"database/sql"
)

const countRegions = `-- name: CountRegions :one
SELECT COUNT(*) FROM region
`

// Counts the total number of regions
func (q *Queries) CountRegions(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countRegions)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createRegion = `-- name: CreateRegion :one
INSERT INTO region (
  region_description
) VALUES (
  $1
)
RETURNING region_id, region_description
`

// Creates a new region and returns it
func (q *Queries) CreateRegion(ctx context.Context, regionDescription interface{}) (Region, error) {
	row := q.db.QueryRowContext(ctx, createRegion, regionDescription)
	var i Region
	err := row.Scan(&i.RegionID, &i.RegionDescription)
	return i, err
}

const deleteRegion = `-- name: DeleteRegion :exec
DELETE FROM region
WHERE region_id = $1
`

// Deletes a region by ID
func (q *Queries) DeleteRegion(ctx context.Context, regionID int16) error {
	_, err := q.db.ExecContext(ctx, deleteRegion, regionID)
	return err
}

const getRegion = `-- name: GetRegion :one
SELECT region_id, region_description
FROM region
WHERE region_id = $1
`

// Gets a region by ID
func (q *Queries) GetRegion(ctx context.Context, regionID int16) (Region, error) {
	row := q.db.QueryRowContext(ctx, getRegion, regionID)
	var i Region
	err := row.Scan(&i.RegionID, &i.RegionDescription)
	return i, err
}

const getRegionByDescription = `-- name: GetRegionByDescription :one
SELECT region_id, region_description
FROM region
WHERE region_description = $1
`

// Gets a region by exact description (useful for lookups)
func (q *Queries) GetRegionByDescription(ctx context.Context, regionDescription interface{}) (Region, error) {
	row := q.db.QueryRowContext(ctx, getRegionByDescription, regionDescription)
	var i Region
	err := row.Scan(&i.RegionID, &i.RegionDescription)
	return i, err
}

const listRegions = `-- name: ListRegions :many
SELECT region_id, region_description
FROM region
ORDER BY region_id
`

// Lists all regions
func (q *Queries) ListRegions(ctx context.Context) ([]Region, error) {
	rows, err := q.db.QueryContext(ctx, listRegions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Region{}
	for rows.Next() {
		var i Region
		if err := rows.Scan(&i.RegionID, &i.RegionDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchRegionsByDescription = `-- name: SearchRegionsByDescription :many
SELECT region_id, region_description
FROM region
WHERE region_description ILIKE '%' || $1 || '%'
ORDER BY region_id
`

// Searches regions by description (case insensitive)
func (q *Queries) SearchRegionsByDescription(ctx context.Context, dollar_1 sql.NullString) ([]Region, error) {
	rows, err := q.db.QueryContext(ctx, searchRegionsByDescription, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Region{}
	for rows.Next() {
		var i Region
		if err := rows.Scan(&i.RegionID, &i.RegionDescription); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRegion = `-- name: UpdateRegion :one
UPDATE region
SET
  region_description = $2
WHERE region_id = $1
RETURNING region_id, region_description
`

type UpdateRegionParams struct {
	RegionID          int16       `json:"region_id"`
	RegionDescription interface{} `json:"region_description"`
}

// Updates a region by ID
func (q *Queries) UpdateRegion(ctx context.Context, arg UpdateRegionParams) (Region, error) {
	row := q.db.QueryRowContext(ctx, updateRegion, arg.RegionID, arg.RegionDescription)
	var i Region
	err := row.Scan(&i.RegionID, &i.RegionDescription)
	return i, err
}
