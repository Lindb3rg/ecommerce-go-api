// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type Querier interface {
	// Counts the total number of categories
	CountCategories(ctx context.Context) (int64, error)
	// Counts the total number of customer demographics
	CountCustomerDemographics(ctx context.Context) (int64, error)
	// Counts the total number of customers
	CountCustomers(ctx context.Context) (int64, error)
	// Counts customers grouped by country
	CountCustomersByCountry(ctx context.Context) ([]CountCustomersByCountryRow, error)
	// Counts how many customers belong to a specific demographic
	CountCustomersByDemographic(ctx context.Context, customerTypeID interface{}) (int64, error)
	// Counts how many demographics a specific customer belongs to
	CountDemographicsByCustomer(ctx context.Context, customerID interface{}) (int64, error)
	// Counts the total number of employees
	CountEmployees(ctx context.Context) (int64, error)
	// Counts direct reports for each manager
	CountEmployeesByManager(ctx context.Context) ([]CountEmployeesByManagerRow, error)
	// Counts employees grouped by territory
	CountEmployeesByTerritory(ctx context.Context) ([]CountEmployeesByTerritoryRow, error)
	// Counts the total number of orders
	CountOrders(ctx context.Context) (int64, error)
	// Counts orders grouped by shipping country
	CountOrdersByCountry(ctx context.Context) ([]CountOrdersByCountryRow, error)
	// Counts orders grouped by their status
	CountOrdersByStatus(ctx context.Context) ([]CountOrdersByStatusRow, error)
	// Counts the total number of products
	CountProducts(ctx context.Context) (int64, error)
	// Counts products grouped by category
	CountProductsByCategory(ctx context.Context) ([]CountProductsByCategoryRow, error)
	// Counts products grouped by supplier
	CountProductsBySupplier(ctx context.Context) ([]CountProductsBySupplierRow, error)
	// Counts how many different products are in a specific order
	CountProductsInOrder(ctx context.Context, orderID int16) (int64, error)
	// Counts the total number of regions
	CountRegions(ctx context.Context) (int64, error)
	// Counts the total number of shippers
	CountShippers(ctx context.Context) (int64, error)
	// Counts the number of states in each region.
	CountStatesByRegion(ctx context.Context) (CountStatesByRegionRow, error)
	// Counts the total number of suppliers
	CountSuppliers(ctx context.Context) (int64, error)
	// Counts suppliers grouped by country
	CountSuppliersByCountry(ctx context.Context) ([]CountSuppliersByCountryRow, error)
	// Counts the total number of territories
	CountTerritories(ctx context.Context) (int64, error)
	// Counts territories grouped by employee
	CountTerritoriesByEmployee(ctx context.Context) ([]CountTerritoriesByEmployeeRow, error)
	// Counts territories grouped by region
	CountTerritoriesByRegion(ctx context.Context) ([]CountTerritoriesByRegionRow, error)
	// Creates a new category and returns it
	CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error)
	// Creates a new customer and returns it
	CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error)
	// Creates a new customer-demographic relation
	CreateCustomerDemoRelation(ctx context.Context, arg CreateCustomerDemoRelationParams) (CustomerCustomerDemo, error)
	// Creates a new customer demographic and returns it
	CreateCustomerDemographic(ctx context.Context, arg CreateCustomerDemographicParams) (CustomerDemographic, error)
	// Creates a new employee and returns it
	CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error)
	// Assigns a territory to an employee
	CreateEmployeeTerritoryRelation(ctx context.Context, arg CreateEmployeeTerritoryRelationParams) (EmployeeTerritory, error)
	// Creates a new order and returns it
	CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error)
	// Creates a new order detail and returns it
	CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) (OrderDetail, error)
	// Creates a new product and returns it
	CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error)
	// Creates a new region and returns it
	CreateRegion(ctx context.Context, regionDescription interface{}) (Region, error)
	// Creates a new shipper and returns it
	CreateShipper(ctx context.Context, arg CreateShipperParams) (Shipper, error)
	// Creates a new state record.
	CreateState(ctx context.Context, arg CreateStateParams) (UsState, error)
	// Creates a new supplier and returns it
	CreateSupplier(ctx context.Context, arg CreateSupplierParams) (Supplier, error)
	// Creates a new territory and returns it
	CreateTerritory(ctx context.Context, arg CreateTerritoryParams) (Territory, error)
	// Deletes all demographic relations for a specific customer
	DeleteAllCustomerDemoRelations(ctx context.Context, customerID interface{}) error
	// Removes all employee assignments for a specific territory
	DeleteAllEmployeeAssignmentsForTerritory(ctx context.Context, territoryID string) error
	// Deletes all details for a specific order
	DeleteAllOrderDetails(ctx context.Context, orderID int16) error
	// Removes all territory assignments for a specific employee
	DeleteAllTerritoryAssignmentsForEmployee(ctx context.Context, employeeID int16) error
	// Deletes a category by ID
	DeleteCategory(ctx context.Context, categoryID int16) error
	// Deletes a customer by ID
	DeleteCustomer(ctx context.Context, customerID interface{}) error
	// Deletes a specific customer-demographic relation
	DeleteCustomerDemoRelation(ctx context.Context, arg DeleteCustomerDemoRelationParams) error
	// Deletes a customer demographic by type ID
	DeleteCustomerDemographic(ctx context.Context, customerTypeID interface{}) error
	// Deletes an employee by ID
	DeleteEmployee(ctx context.Context, employeeID int16) error
	// Removes a specific territory assignment from an employee
	DeleteEmployeeTerritoryRelation(ctx context.Context, arg DeleteEmployeeTerritoryRelationParams) error
	// Deletes an order by ID
	DeleteOrder(ctx context.Context, orderID int16) error
	// Deletes a specific order detail
	DeleteOrderDetail(ctx context.Context, arg DeleteOrderDetailParams) error
	// Deletes a product by ID
	DeleteProduct(ctx context.Context, productID int16) error
	// Deletes a region by ID
	DeleteRegion(ctx context.Context, regionID int16) error
	// Deletes a shipper by ID
	DeleteShipper(ctx context.Context, shipperID int16) error
	// Deletes a state by its primary key (employee_id).
	DeleteState(ctx context.Context, employeeID int16) error
	// Deletes a supplier by ID
	DeleteSupplier(ctx context.Context, supplierID int16) error
	// Deletes a territory by ID
	DeleteTerritory(ctx context.Context, territoryID string) error
	// Marks a product as discontinued
	DiscontinueProduct(ctx context.Context, productID int16) (Product, error)
	// Gets the average order value
	GetAverageOrderValue(ctx context.Context) (float64, error)
	// Gets the average time between order and shipment
	GetAverageProcessingTime(ctx context.Context) (float64, error)
	// Gets a category by ID
	GetCategory(ctx context.Context, categoryID int16) (Category, error)
	// Gets a customer by ID
	GetCustomer(ctx context.Context, customerID interface{}) (Customer, error)
	// Gets a specific customer-demographic relation
	GetCustomerDemoRelation(ctx context.Context, arg GetCustomerDemoRelationParams) (CustomerCustomerDemo, error)
	// Gets a customer demographic by type ID
	GetCustomerDemographic(ctx context.Context, customerTypeID interface{}) (CustomerDemographic, error)
	// Gets an employee by ID
	GetEmployee(ctx context.Context, employeeID int16) (Employee, error)
	// Gets the entire reporting hierarchy for an employee
	GetEmployeeHierarchy(ctx context.Context, employeeID int16) ([]GetEmployeeHierarchyRow, error)
	// Gets a specific employee-territory relation
	GetEmployeeTerritoryRelation(ctx context.Context, arg GetEmployeeTerritoryRelationParams) (EmployeeTerritory, error)
	// Gets an employee by ID along with their manager's details
	GetEmployeeWithManager(ctx context.Context, employeeID int16) (GetEmployeeWithManagerRow, error)
	// Gets order counts by month for a given year
	GetMonthlyOrderCounts(ctx context.Context, orderDate pgtype.Date) ([]GetMonthlyOrderCountsRow, error)
	// Gets the most popular products based on quantity ordered
	GetMostPopularProducts(ctx context.Context, limit int32) ([]GetMostPopularProductsRow, error)
	// Gets an order by ID
	GetOrder(ctx context.Context, orderID int16) (Order, error)
	// Gets a specific order detail by order ID and product ID
	GetOrderDetail(ctx context.Context, arg GetOrderDetailParams) (OrderDetail, error)
	// Gets order details with product information for a specific order
	GetOrderDetailWithProductInfo(ctx context.Context, orderID int16) ([]GetOrderDetailWithProductInfoRow, error)
	// Gets order details with order and product information
	GetOrderDetailsWithOrderInfo(ctx context.Context, orderID int16) ([]GetOrderDetailsWithOrderInfoRow, error)
	// Calculates the total amount for a specific order
	GetOrderTotal(ctx context.Context, orderID int16) (int64, error)
	// Gets an order by ID with customer, employee, and shipper details
	GetOrderWithDetails(ctx context.Context, orderID int16) (GetOrderWithDetailsRow, error)
	// Gets a product by ID
	GetProduct(ctx context.Context, productID int16) (Product, error)
	// Gets product sales grouped by category
	GetProductSalesByCategory(ctx context.Context) ([]GetProductSalesByCategoryRow, error)
	// Gets product sales within a specific date range
	GetProductSalesByDateRange(ctx context.Context, arg GetProductSalesByDateRangeParams) ([]GetProductSalesByDateRangeRow, error)
	// Gets the total inventory value by category
	GetProductValueByCategory(ctx context.Context) ([]GetProductValueByCategoryRow, error)
	// Gets a product by ID with category and supplier details
	GetProductWithDetails(ctx context.Context, productID int16) (GetProductWithDetailsRow, error)
	// Gets a region by ID
	GetRegion(ctx context.Context, regionID int16) (Region, error)
	// Gets a region by exact description (useful for lookups)
	GetRegionByDescription(ctx context.Context, regionDescription interface{}) (Region, error)
	// Gets a shipper by ID
	GetShipper(ctx context.Context, shipperID int16) (Shipper, error)
	// Gets a shipper by exact company name (useful for duplicate checks)
	GetShipperByExactName(ctx context.Context, companyName string) (Shipper, error)
	// Gets a state by its primary key (employee_id).
	GetState(ctx context.Context, employeeID int16) (UsState, error)
	// Gets a state by its abbreviation.
	GetStateByAbbreviation(ctx context.Context, stateAbbr pgtype.Text) (UsState, error)
	// Gets all states in a specific region.
	GetStatesByRegion(ctx context.Context, stateRegion pgtype.Text) ([]UsState, error)
	// Gets a supplier by ID
	GetSupplier(ctx context.Context, supplierID int16) (Supplier, error)
	// Gets a supplier by ID with formatted contact information
	GetSupplierWithContactInfo(ctx context.Context, supplierID int16) (GetSupplierWithContactInfoRow, error)
	// Gets a territory by ID
	GetTerritory(ctx context.Context, territoryID string) (Territory, error)
	// Gets a territory by ID with its region details
	GetTerritoryWithRegion(ctx context.Context, territoryID string) (GetTerritoryWithRegionRow, error)
	// Gets total freight costs grouped by customer
	GetTotalFreightByCustomer(ctx context.Context, limit int32) ([]GetTotalFreightByCustomerRow, error)
	// Gets the total quantity of items in a specific order
	GetTotalQuantityInOrder(ctx context.Context, orderID int16) (int64, error)
	// Lists all customer-demographic relations with full details from both tables
	ListAllCustomerDemographicsWithDetails(ctx context.Context) ([]ListAllCustomerDemographicsWithDetailsRow, error)
	// Lists all categories
	ListCategories(ctx context.Context) ([]Category, error)
	// Lists all customer demographics
	ListCustomerDemographics(ctx context.Context) ([]CustomerDemographic, error)
	// Lists all demographics for a specific customer with demographic details
	ListCustomerDemographicsByCustomer(ctx context.Context, customerID interface{}) ([]CustomerDemographic, error)
	// Lists all customers
	ListCustomers(ctx context.Context) ([]Customer, error)
	// Lists all customers from a specific city
	ListCustomersByCity(ctx context.Context, city pgtype.Text) ([]Customer, error)
	// Lists all customers from a specific country
	ListCustomersByCountry(ctx context.Context, country pgtype.Text) ([]Customer, error)
	// Lists all customers belonging to a specific demographic with customer details
	ListCustomersByDemographic(ctx context.Context, customerTypeID interface{}) ([]Customer, error)
	// Lists orders that were shipped after the required date
	ListDelayedOrders(ctx context.Context) ([]Order, error)
	// Lists all discontinued products
	ListDiscontinuedProducts(ctx context.Context) ([]Product, error)
	// Lists all employees
	ListEmployees(ctx context.Context) ([]Employee, error)
	// Lists all employees from a specific country
	ListEmployeesByCountry(ctx context.Context, country pgtype.Text) ([]Employee, error)
	// Lists all employees that report to a specific manager
	ListEmployeesByManager(ctx context.Context, reportsTo pgtype.Int2) ([]Employee, error)
	// Lists employees assigned to territories in a specific region
	ListEmployeesByRegion(ctx context.Context, regionID int16) ([]ListEmployeesByRegionRow, error)
	// Lists all employees assigned to a specific territory
	ListEmployeesByTerritory(ctx context.Context, territoryID string) ([]Employee, error)
	// Lists all employees with a specific title
	ListEmployeesByTitle(ctx context.Context, title pgtype.Text) ([]Employee, error)
	// Lists employees with their territories and regions
	ListEmployeesWithTerritoriesAndRegions(ctx context.Context) ([]ListEmployeesWithTerritoriesAndRegionsRow, error)
	// Lists all details for a specific order
	ListOrderDetailsByOrder(ctx context.Context, orderID int16) ([]OrderDetail, error)
	// Lists all orders containing a specific product
	ListOrderDetailsByProduct(ctx context.Context, productID int16) ([]OrderDetail, error)
	// Lists all orders sorted by date (newest first)
	ListOrders(ctx context.Context) ([]Order, error)
	// Lists all orders for a specific customer
	ListOrdersByCustomer(ctx context.Context, customerID interface{}) ([]Order, error)
	// Lists orders within a specific date range
	ListOrdersByDateRange(ctx context.Context, arg ListOrdersByDateRangeParams) ([]Order, error)
	// Lists all orders handled by a specific employee
	ListOrdersByEmployee(ctx context.Context, employeeID pgtype.Int2) ([]Order, error)
	// Lists all orders shipped by a specific shipper
	ListOrdersByShipper(ctx context.Context, shipVia pgtype.Int2) ([]Order, error)
	// Lists orders that have not been shipped yet
	ListPendingShipments(ctx context.Context) ([]Order, error)
	// Lists all products
	ListProducts(ctx context.Context) ([]Product, error)
	// Lists all products in a specific category
	ListProductsByCategory(ctx context.Context, categoryID pgtype.Int2) ([]Product, error)
	// Lists all products from a specific supplier
	ListProductsBySupplier(ctx context.Context, supplierID pgtype.Int2) ([]Product, error)
	// Lists all products that need to be reordered (stock below reorder level)
	ListProductsNeedingReorder(ctx context.Context) ([]Product, error)
	// Lists all products with category and supplier details
	ListProductsWithDetails(ctx context.Context) ([]ListProductsWithDetailsRow, error)
	// Lists orders placed within a specified number of days
	ListRecentOrders(ctx context.Context, dollar_1 pgtype.Interval) ([]Order, error)
	// Lists all regions
	ListRegions(ctx context.Context) ([]Region, error)
	// Lists all shippers
	ListShippers(ctx context.Context) ([]Shipper, error)
	// Lists all states, optionally filtered by region.
	ListStates(ctx context.Context, dollar_1 string) ([]UsState, error)
	// Lists all suppliers
	ListSuppliers(ctx context.Context) ([]Supplier, error)
	// Lists all suppliers from a specific city
	ListSuppliersByCity(ctx context.Context, city pgtype.Text) ([]Supplier, error)
	// Lists all suppliers from a specific country
	ListSuppliersByCountry(ctx context.Context, country pgtype.Text) ([]Supplier, error)
	// Lists all territories
	ListTerritories(ctx context.Context) ([]Territory, error)
	// Lists all territories assigned to a specific employee
	ListTerritoriesByEmployee(ctx context.Context, employeeID int16) ([]Territory, error)
	// Lists all territories in a specific region
	ListTerritoriesByRegion(ctx context.Context, regionID int16) ([]Territory, error)
	// Lists all territories with their region details
	ListTerritoriesWithRegion(ctx context.Context) ([]ListTerritoriesWithRegionRow, error)
	// Searches categories by name (case insensitive)
	SearchCategoriesByName(ctx context.Context, dollar_1 pgtype.Text) ([]Category, error)
	// Searches customer demographics by description (case insensitive)
	SearchCustomerDemographicsByDesc(ctx context.Context, dollar_1 pgtype.Text) ([]CustomerDemographic, error)
	// Searches customers by company name (case insensitive)
	SearchCustomersByCompanyName(ctx context.Context, dollar_1 pgtype.Text) ([]Customer, error)
	// Searches customers by contact name (case insensitive)
	SearchCustomersByContactName(ctx context.Context, dollar_1 pgtype.Text) ([]Customer, error)
	// Searches employees by first or last name (case insensitive)
	SearchEmployeesByName(ctx context.Context, dollar_1 pgtype.Text) ([]Employee, error)
	// Searches products by name (case insensitive)
	SearchProductsByName(ctx context.Context, dollar_1 pgtype.Text) ([]Product, error)
	// Searches regions by description (case insensitive)
	SearchRegionsByDescription(ctx context.Context, dollar_1 pgtype.Text) ([]Region, error)
	// Searches shippers by company name (case insensitive)
	SearchShippersByName(ctx context.Context, dollar_1 pgtype.Text) ([]Shipper, error)
	// Searches shippers by phone number
	SearchShippersByPhone(ctx context.Context, dollar_1 pgtype.Text) ([]Shipper, error)
	// Searches suppliers by company name (case insensitive)
	SearchSuppliersByCompanyName(ctx context.Context, dollar_1 pgtype.Text) ([]Supplier, error)
	// Searches suppliers by contact name (case insensitive)
	SearchSuppliersByContactName(ctx context.Context, dollar_1 pgtype.Text) ([]Supplier, error)
	// Searches territories by description (case insensitive)
	SearchTerritoriesByDescription(ctx context.Context, dollar_1 pgtype.Text) ([]Territory, error)
	// Updates a category by ID
	UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error)
	// Updates a customer by ID
	UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error)
	// Updates a customer demographic by type ID
	UpdateCustomerDemographic(ctx context.Context, arg UpdateCustomerDemographicParams) (CustomerDemographic, error)
	// Updates an employee by ID
	UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error)
	// Updates an order by ID
	UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error)
	// Updates an order detail by order ID and product ID
	UpdateOrderDetail(ctx context.Context, arg UpdateOrderDetailParams) (OrderDetail, error)
	// Updates only the quantity of an order detail
	UpdateOrderDetailQuantity(ctx context.Context, arg UpdateOrderDetailQuantityParams) (OrderDetail, error)
	// Updates a product by ID
	UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error)
	// Updates a product's price
	UpdateProductPrice(ctx context.Context, arg UpdateProductPriceParams) (Product, error)
	// Updates a product's stock levels
	UpdateProductStock(ctx context.Context, arg UpdateProductStockParams) (Product, error)
	// Updates a region by ID
	UpdateRegion(ctx context.Context, arg UpdateRegionParams) (Region, error)
	// Updates a shipper by ID
	UpdateShipper(ctx context.Context, arg UpdateShipperParams) (Shipper, error)
	// Updates just the shipping info for an order
	UpdateShippingInfo(ctx context.Context, arg UpdateShippingInfoParams) (Order, error)
	// Updates an existing state record.
	UpdateState(ctx context.Context, arg UpdateStateParams) (UsState, error)
	// Updates a supplier by ID
	UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) (Supplier, error)
	// Updates a territory by ID
	UpdateTerritory(ctx context.Context, arg UpdateTerritoryParams) (Territory, error)
}

var _ Querier = (*Queries)(nil)
