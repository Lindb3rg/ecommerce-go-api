// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: supplier.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countSuppliers = `-- name: CountSuppliers :one
SELECT COUNT(*) FROM suppliers
`

// Counts the total number of suppliers
func (q *Queries) CountSuppliers(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countSuppliers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSuppliersByCountry = `-- name: CountSuppliersByCountry :many
SELECT country, COUNT(*) as supplier_count
FROM suppliers
GROUP BY country
ORDER BY COUNT(*) DESC
`

type CountSuppliersByCountryRow struct {
	Country       pgtype.Text `json:"country"`
	SupplierCount int64       `json:"supplier_count"`
}

// Counts suppliers grouped by country
func (q *Queries) CountSuppliersByCountry(ctx context.Context) ([]CountSuppliersByCountryRow, error) {
	rows, err := q.db.Query(ctx, countSuppliersByCountry)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CountSuppliersByCountryRow{}
	for rows.Next() {
		var i CountSuppliersByCountryRow
		if err := rows.Scan(&i.Country, &i.SupplierCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO suppliers (
  company_name,
  contact_name,
  contact_title,
  address,
  city,
  region,
  postal_code,
  country,
  phone,
  fax,
  homepage
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage
`

type CreateSupplierParams struct {
	CompanyName  string      `json:"company_name"`
	ContactName  pgtype.Text `json:"contact_name"`
	ContactTitle pgtype.Text `json:"contact_title"`
	Address      pgtype.Text `json:"address"`
	City         pgtype.Text `json:"city"`
	Region       pgtype.Text `json:"region"`
	PostalCode   pgtype.Text `json:"postal_code"`
	Country      pgtype.Text `json:"country"`
	Phone        pgtype.Text `json:"phone"`
	Fax          pgtype.Text `json:"fax"`
	Homepage     pgtype.Text `json:"homepage"`
}

// Creates a new supplier and returns it
func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (Supplier, error) {
	row := q.db.QueryRow(ctx, createSupplier,
		arg.CompanyName,
		arg.ContactName,
		arg.ContactTitle,
		arg.Address,
		arg.City,
		arg.Region,
		arg.PostalCode,
		arg.Country,
		arg.Phone,
		arg.Fax,
		arg.Homepage,
	)
	var i Supplier
	err := row.Scan(
		&i.SupplierID,
		&i.CompanyName,
		&i.ContactName,
		&i.ContactTitle,
		&i.Address,
		&i.City,
		&i.Region,
		&i.PostalCode,
		&i.Country,
		&i.Phone,
		&i.Fax,
		&i.Homepage,
	)
	return i, err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
DELETE FROM suppliers
WHERE supplier_id = $1
`

// Deletes a supplier by ID
func (q *Queries) DeleteSupplier(ctx context.Context, supplierID int16) error {
	_, err := q.db.Exec(ctx, deleteSupplier, supplierID)
	return err
}

const getSupplier = `-- name: GetSupplier :one
SELECT supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage
FROM suppliers
WHERE supplier_id = $1
`

// Gets a supplier by ID
func (q *Queries) GetSupplier(ctx context.Context, supplierID int16) (Supplier, error) {
	row := q.db.QueryRow(ctx, getSupplier, supplierID)
	var i Supplier
	err := row.Scan(
		&i.SupplierID,
		&i.CompanyName,
		&i.ContactName,
		&i.ContactTitle,
		&i.Address,
		&i.City,
		&i.Region,
		&i.PostalCode,
		&i.Country,
		&i.Phone,
		&i.Fax,
		&i.Homepage,
	)
	return i, err
}

const getSupplierWithContactInfo = `-- name: GetSupplierWithContactInfo :one
SELECT
  supplier_id,
  company_name,
  contact_name,
  contact_title,
  address,
  city,
  region,
  postal_code,
  country,
  phone,
  fax,
  homepage,
  contact_name || ' (' || contact_title || ')' as formatted_contact,
  address || ', ' || city || COALESCE(', ' || region, '') || ' ' || COALESCE(postal_code, '') || ', ' || country as full_address
FROM suppliers
WHERE supplier_id = $1
`

type GetSupplierWithContactInfoRow struct {
	SupplierID       int16       `json:"supplier_id"`
	CompanyName      string      `json:"company_name"`
	ContactName      pgtype.Text `json:"contact_name"`
	ContactTitle     pgtype.Text `json:"contact_title"`
	Address          pgtype.Text `json:"address"`
	City             pgtype.Text `json:"city"`
	Region           pgtype.Text `json:"region"`
	PostalCode       pgtype.Text `json:"postal_code"`
	Country          pgtype.Text `json:"country"`
	Phone            pgtype.Text `json:"phone"`
	Fax              pgtype.Text `json:"fax"`
	Homepage         pgtype.Text `json:"homepage"`
	FormattedContact interface{} `json:"formatted_contact"`
	FullAddress      interface{} `json:"full_address"`
}

// Gets a supplier by ID with formatted contact information
func (q *Queries) GetSupplierWithContactInfo(ctx context.Context, supplierID int16) (GetSupplierWithContactInfoRow, error) {
	row := q.db.QueryRow(ctx, getSupplierWithContactInfo, supplierID)
	var i GetSupplierWithContactInfoRow
	err := row.Scan(
		&i.SupplierID,
		&i.CompanyName,
		&i.ContactName,
		&i.ContactTitle,
		&i.Address,
		&i.City,
		&i.Region,
		&i.PostalCode,
		&i.Country,
		&i.Phone,
		&i.Fax,
		&i.Homepage,
		&i.FormattedContact,
		&i.FullAddress,
	)
	return i, err
}

const listSuppliers = `-- name: ListSuppliers :many
SELECT supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage
FROM suppliers
ORDER BY company_name
`

// Lists all suppliers
func (q *Queries) ListSuppliers(ctx context.Context) ([]Supplier, error) {
	rows, err := q.db.Query(ctx, listSuppliers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.SupplierID,
			&i.CompanyName,
			&i.ContactName,
			&i.ContactTitle,
			&i.Address,
			&i.City,
			&i.Region,
			&i.PostalCode,
			&i.Country,
			&i.Phone,
			&i.Fax,
			&i.Homepage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSuppliersByCity = `-- name: ListSuppliersByCity :many
SELECT supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage
FROM suppliers
WHERE city = $1
ORDER BY company_name
`

// Lists all suppliers from a specific city
func (q *Queries) ListSuppliersByCity(ctx context.Context, city pgtype.Text) ([]Supplier, error) {
	rows, err := q.db.Query(ctx, listSuppliersByCity, city)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.SupplierID,
			&i.CompanyName,
			&i.ContactName,
			&i.ContactTitle,
			&i.Address,
			&i.City,
			&i.Region,
			&i.PostalCode,
			&i.Country,
			&i.Phone,
			&i.Fax,
			&i.Homepage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSuppliersByCountry = `-- name: ListSuppliersByCountry :many
SELECT supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage
FROM suppliers
WHERE country = $1
ORDER BY company_name
`

// Lists all suppliers from a specific country
func (q *Queries) ListSuppliersByCountry(ctx context.Context, country pgtype.Text) ([]Supplier, error) {
	rows, err := q.db.Query(ctx, listSuppliersByCountry, country)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.SupplierID,
			&i.CompanyName,
			&i.ContactName,
			&i.ContactTitle,
			&i.Address,
			&i.City,
			&i.Region,
			&i.PostalCode,
			&i.Country,
			&i.Phone,
			&i.Fax,
			&i.Homepage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSuppliersByCompanyName = `-- name: SearchSuppliersByCompanyName :many
SELECT supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage
FROM suppliers
WHERE company_name ILIKE '%' || $1 || '%'
ORDER BY company_name
`

// Searches suppliers by company name (case insensitive)
func (q *Queries) SearchSuppliersByCompanyName(ctx context.Context, dollar_1 pgtype.Text) ([]Supplier, error) {
	rows, err := q.db.Query(ctx, searchSuppliersByCompanyName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.SupplierID,
			&i.CompanyName,
			&i.ContactName,
			&i.ContactTitle,
			&i.Address,
			&i.City,
			&i.Region,
			&i.PostalCode,
			&i.Country,
			&i.Phone,
			&i.Fax,
			&i.Homepage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchSuppliersByContactName = `-- name: SearchSuppliersByContactName :many
SELECT supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage
FROM suppliers
WHERE contact_name ILIKE '%' || $1 || '%'
ORDER BY contact_name
`

// Searches suppliers by contact name (case insensitive)
func (q *Queries) SearchSuppliersByContactName(ctx context.Context, dollar_1 pgtype.Text) ([]Supplier, error) {
	rows, err := q.db.Query(ctx, searchSuppliersByContactName, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Supplier{}
	for rows.Next() {
		var i Supplier
		if err := rows.Scan(
			&i.SupplierID,
			&i.CompanyName,
			&i.ContactName,
			&i.ContactTitle,
			&i.Address,
			&i.City,
			&i.Region,
			&i.PostalCode,
			&i.Country,
			&i.Phone,
			&i.Fax,
			&i.Homepage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplier = `-- name: UpdateSupplier :one
UPDATE suppliers
SET
  company_name = $2,
  contact_name = $3,
  contact_title = $4,
  address = $5,
  city = $6,
  region = $7,
  postal_code = $8,
  country = $9,
  phone = $10,
  fax = $11,
  homepage = $12
WHERE supplier_id = $1
RETURNING supplier_id, company_name, contact_name, contact_title, address, city, region, postal_code, country, phone, fax, homepage
`

type UpdateSupplierParams struct {
	SupplierID   int16       `json:"supplier_id"`
	CompanyName  string      `json:"company_name"`
	ContactName  pgtype.Text `json:"contact_name"`
	ContactTitle pgtype.Text `json:"contact_title"`
	Address      pgtype.Text `json:"address"`
	City         pgtype.Text `json:"city"`
	Region       pgtype.Text `json:"region"`
	PostalCode   pgtype.Text `json:"postal_code"`
	Country      pgtype.Text `json:"country"`
	Phone        pgtype.Text `json:"phone"`
	Fax          pgtype.Text `json:"fax"`
	Homepage     pgtype.Text `json:"homepage"`
}

// Updates a supplier by ID
func (q *Queries) UpdateSupplier(ctx context.Context, arg UpdateSupplierParams) (Supplier, error) {
	row := q.db.QueryRow(ctx, updateSupplier,
		arg.SupplierID,
		arg.CompanyName,
		arg.ContactName,
		arg.ContactTitle,
		arg.Address,
		arg.City,
		arg.Region,
		arg.PostalCode,
		arg.Country,
		arg.Phone,
		arg.Fax,
		arg.Homepage,
	)
	var i Supplier
	err := row.Scan(
		&i.SupplierID,
		&i.CompanyName,
		&i.ContactName,
		&i.ContactTitle,
		&i.Address,
		&i.City,
		&i.Region,
		&i.PostalCode,
		&i.Country,
		&i.Phone,
		&i.Fax,
		&i.Homepage,
	)
	return i, err
}
